space = `unicode space character`
number = (1 | ... | 9) { 0 | ... | 9 } | 0
text = ' { `any unicode character` } '
tuple_element = expression | identifier = expression
tuple = \(\) | \(tuple_element{, tuple_element}\)
lambda = \\identifier{space identifier} -> expression
literal = number | text  | tuple | lambda
function_application = expression expression {expression}
term_definition = Term constant_case_identifier | Term constant_case_identifier identifier{space identifier}
identifier = `alphabet character` { `alphabet character` | `any digit` }
constant_case_identifier = `Uppercase alphabet character` { `alphabet character` | `any digit` }
pattern_match_case = constant_case_identifier -> expression | constant_case_identifier identifier{space identifier} -> expression
pattern_match = `match` expression with { pattern_match_case }
if_then_else = `if` expression `then` expression `else` expression
expression = literal | selector | pattern_match | if_then_else | function_application | (expression)
comment = // { `any unicode character` }
selector = (identifier | .identifier | #(identifier | number) | [identifier=expression]){selector}
binding = identifier : (expression | flow)
flow = [selector] `{` { function_application `;` } `}` [selector]
statement = comment | flow | term_definition | binding
program = { statement }